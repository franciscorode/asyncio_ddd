
[project]
name = "asyncio-ddd"
requires-python = ">=3.12,<4.0"
version = "0.1.0"
description = "âš¡ Example python project using asyncio and DDD patterns"
authors = [{ name = "franciscorode", email = "fran_rode@hotmail.com" }]
readme = "README.md"
dependencies = [
    # Domain entities
    "pydantic (==2.5.3)",
    # Database 
    "sqlalchemy[asyncio] (==2.0.25)",
    "asyncpg (==0.29.0)",
    "alembic (==1.13.1)",
    # Environment
    "python-dotenv (==1.0.0)",
    # DI
    "dependency-injector (==4.45.0)",
    # API
    "fastapi (==0.108.0)",
    "sqladmin (==0.16.0)",
    "uvicorn (==0.25.0)",
    # Events (rabbitmq)
    "aio-pika (==9.3.1)",
]

[tool.poetry.group.dev.dependencies]
black = "23.12.1"
ruff = "0.1.11"
mypy = "1.8.0"
pre-commit = "3.6.0"


[tool.poetry.group.test.dependencies]
pytest = "7.4.4"
pytest-cov = "4.1.0"
pytest-env = "1.1.3"
pytest-asyncio = "0.23.3"
pytest-alembic = "0.11.0"
faker = "22.1.0"
httpx = "0.26.0"          # # fastapi testclient


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


#########################
######### Ruff ##########
#########################

[tool.ruff]
target-version = "py311"
line-length = 88

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "PL",  # pylint
    "ARG", # flake8-unused-arguments
]

ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.pylint]
max-args = 25 # Maximum number of arguments for function/method

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
] # https://stackoverflow.com/a/74701417/9485417


#########################
######### Mypy ##########
#########################

[tool.mypy]

plugins = ["sqlalchemy.ext.mypy.plugin"]

strict = true

exclude = ["venv"]

# to avoid Duplicate module named "x"
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    # We only check test clases, mothers and utils
    "tests.*.unit.*",
    "tests.*.integration.*",
    "tests.*.acceptance.*",
]
ignore_errors = true


#########################
######## Pytest #########
#########################
[tool.pytest.ini_options]
env = [
    "D:APP_ENVIRONMENT=TEST",
    "D:USER_REPOSITORY_TYPE=FAKE",
    "D:DOMAIN_EVENT_BUS_TYPE=FAKE",
    "D:ALEMBIC_CONFIG=asyncio_ddd/shared/infrastructure/persistence/alembic.ini",
]
markers = ["unit", "integration", "acceptance"]

addopts = [
    "tests",
    "--cov-report=xml:output/coverage/coverage.xml",
    "--cov=asyncio_ddd",
    "--junitxml=output/tests/tests.xml",
    "-v",
    "--color=yes",
    "--durations=10",
    "--pythonwarnings=error::sqlalchemy.exc.SAWarning", # to detect problems in migrations
    "--test-alembic",
]

python_files = "test_*.py"
python_functions = "test_* should_*"
pythonpath = "."


#########################
####### Coverage ########
#########################

[tool.coverage.report]
exclude_lines = ["raise NotImplementedError()", "if TYPE_CHECKING:"]
